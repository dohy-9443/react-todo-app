{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","React","memo","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf8b575e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <div className=\"app-title\">일정 관리</div>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      onInsert(value);\r\n      setValue(''); // value 초기화\r\n\r\n      // submit 이벤트는 브라우저에서 새로고침을 발생\r\n      // 이를 방지하기 위해서 이 함수를 호출\r\n      e.preventDefault();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요.\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({ todo, onRemove, onToggle, style }) => {\r\n  const { id, text, checked } = todo;\r\n\r\n  return (\r\n    <div className=\"TodoListItem-virtualized\" style={style}>\r\n      <div className=\"TodoListItem\">\r\n        <div\r\n          className={cn('checkbox', { checked })}\r\n          onClick={() => onToggle(id)}\r\n        >\r\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n        <div className=\"remove\" onClick={() => onRemove(id)}>\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","import React, { useCallback } from 'react';\r\nimport { List } from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ todos, onRemove, onToggle }) => {\r\n  const rowRenderer = useCallback(\r\n    ({ index, key, style }) => {\r\n      const todo = todos[index];\r\n      return (\r\n        <TodoListItem\r\n          todo={todo}\r\n          key={key}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          style={style}\r\n        />\r\n      );\r\n    },\r\n    [onRemove, onToggle, todos],\r\n  );\r\n\r\n  return (\r\n    <List\r\n      className=\"TodoList\"\r\n      width={512} // 전체 크기\r\n      height={513} // 전체 높이\r\n      rowCount={todos.length} // 항목 개수\r\n      rowHeight={57} // 항목 높이\r\n      rowRenderer={rowRenderer} // 항목을 렌더링할 때 쓰는 함수\r\n      list={todos} // 배열\r\n      style={{ outline: 'none' }} // List에 기본 적용되는 outline 스타일 제거\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React, { useReducer, useRef, useCallback } from 'react';\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction createBulkTodos() {\r\n  const array = [];\r\n  for (let i = 1; i <= 3; i++) {\r\n    array.push({\r\n      id: i,\r\n      text: `임시 데이터 ${i}`,\r\n      checked: false,\r\n    });\r\n  }\r\n\r\n  array[0].checked = true;\r\n  return array;\r\n}\r\n\r\nfunction todoReducer(todos, action) {\r\n  switch (action.type) {\r\n    case 'INSERT': // 새로 추가\r\n      // { type: 'INSERT', todo: { id: 1, text: 'todo', checked: false } }\r\n      return todos.concat(action.todo);\r\n    case 'REMOVE': // 제거\r\n      // { type: 'REMOVE', id: 1 }\r\n      return todos.filter((todo) => todo.id !== action.id);\r\n    case 'TOGGLE': // 토글\r\n      // { type: 'REMOVE', id: 1 }\r\n      return todos.map((todo) =>\r\n        todo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\r\n      );\r\n    default:\r\n      return todos;\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\r\n\r\n  // 고유값으로 사용될 id\r\n  // ref를 사용하여 변수 담기\r\n  const nextId = useRef(4);\r\n\r\n  const onInsert = useCallback((text) => {\r\n    const todo = {\r\n      id: nextId.current,\r\n      text,\r\n      checked: false,\r\n    };\r\n    dispatch({ type: 'INSERT', todo });\r\n    nextId.current += 1; // nextId 1씩 더하기\r\n  }, []);\r\n\r\n  const onRemove = useCallback((id) => {\r\n    dispatch({ type: 'REMOVE', id });\r\n  }, []);\r\n\r\n  const onToggle = useCallback((id) => {\r\n    dispatch({ type: 'TOGGLE', id });\r\n  }, []);\r\n\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\r\n    </TodoTemplate>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}